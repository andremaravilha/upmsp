package upmsp.algorithm.neighborhood;

import upmsp.model.*;
import upmsp.model.solution.*;

import java.util.*;

/**
 * This class represents a Shift Move (as in the paper). A neighbor in the Shift
 * Move is generated by re-scheduling one job from the machine with the largest
 * total execution time (or a random machine) to another position in the
 * machine. The parameter "useMakespanMachine" determines whether the machine
 * with the largest total execution time is always used.
 *
 * @author Tulio Toffolo
 * @author Andre L. Maravilha
 */
public class Shift extends Move {

    private Machine machine;
    private int pos1, pos2, job;

    /**
     * Instantiates a new Shift Move.
     * @param problem problem.
     * @param random  random number generator.
     */
    public Shift(Problem problem, Random random) {
        super(problem, random, "shift");
    }

    @Override
    public int doMove(Solution solution, boolean useIntensificationPolicy, boolean useMakespanMachine) {
        super.doMove(solution, useIntensificationPolicy, useMakespanMachine);

        // selecting machines to involve in operation
        if (useMakespanMachine && solution.makespanMachine.getNJobs() > 1) {
            machine = solution.makespanMachine;
        } else {
            int m;
            do {
                m = random.nextInt(solution.machines.length);
            } while (solution.machines[m].getNJobs() <= 1);
            machine = solution.machines[m];
        }

        // selecting jobs to perform operation
        if (useIntensificationPolicy) {

            // selecting job (and source position) to perform operation
            pos1 = random.nextInt(machine.getNJobs());
            job = machine.jobs[pos1];
            machine.delJob(pos1);

            // selecting destination position
            pos2 = random.nextInt(machine.getNJobs() + 1);
            int cost = Integer.MAX_VALUE;
            for (int p = 0; p <= machine.getNJobs(); p++) {
                if (p == pos1) continue;
                int simulatedCost = machine.getDeltaCostAddJob(job, p);
                if (simulatedCost < cost) {
                    cost = simulatedCost;
                    pos2 = p;
                }
            }

            // moving jobs
            machine.addJob(job, pos2);

        } else {

            do {
                pos1 = random.nextInt(machine.getNJobs());
                pos2 = random.nextInt(machine.getNJobs());
            } while (pos1 == pos2);
            job = machine.jobs[pos1];

            // moving jobs
            machine.delJob(pos1);
            machine.addJob(job, pos2);
        }

        solution.updateCost();
        return deltaCost = solution.getCost() - initialCost;
    }

    @Override
    public boolean hasMove(Solution solution, boolean useIntensificationPolicy, boolean useMakespanMachine) {
        return !useMakespanMachine || solution.makespanMachine.getNJobs() > 1;
    }

    @Override
    public void accept() {
        super.accept();
    }

    @Override
    public void reject() {
        super.reject();

        machine.delJob(pos2);
        machine.addJob(job, pos1);
        currentSolution.updateCost();
    }
}
